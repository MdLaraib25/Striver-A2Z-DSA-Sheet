Method - 1
TC - N^2
SC - N

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int heightOfTree(TreeNode root){
        if(root == null) return 0;
        int lh = heightOfTree(root.left);
        int rh = heightOfTree(root.right);
        return 1 + Math.max(lh, rh);
    }

    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        if(Math.abs(heightOfTree(root.left) - heightOfTree(root.right)) > 1) return false;
        return isBalanced(root.left) &&  isBalanced(root.right);
    }
}


Method - 2
TC - N
SC - H - height 



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int heightOfTree(TreeNode root){
        if(root == null) return 0;

        int lh = heightOfTree(root.left);
        if(lh == -1) return -1;

        int rh = heightOfTree(root.right);
        if(rh == -1) return -1;

        if(Math.abs(lh - rh) > 1) return -1;
        return 1 + Math.max(lh, rh);
    }

    public boolean isBalanced(TreeNode root) {
      return heightOfTree(root) != -1;
    }
}
