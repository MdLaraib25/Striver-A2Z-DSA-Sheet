class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        Arrays.sort(intervals, (a,b) ->Integer.compare(a[0],b[0]));
        List<int[]> merged = new ArrayList<>();
        int[] previous = intervals[0];
        for(int i =0;i<n;i++){
            if(intervals[i][0]<= previous[1]){
                previous[1] = Math.max(previous[1], intervals[i][1]);
            } else {
                merged.add(previous);
                previous = intervals[i];
            }
        }
        merged.add(previous);
        return merged.toArray(new int[merged.size()][]);
    }
}



Approach 02

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        List<int[]> ans = new LinkedList<>();

        int n = intervals.length;
        int[] temp = new int[]{intervals[0][0], intervals[0][1]};

        for (int i = 1; i < n; i++) {
            if (intervals[i][0] <= temp[1]) {
                // overlapping â†’ merge
                temp[1] = Math.max(temp[1], intervals[i][1]);
            } else {
                // no overlap , add previous merged interval
                ans.add(temp);
                temp = new int[]{intervals[i][0], intervals[i][1]};
            }
        }
        ans.add(temp); // add the last merged interval

        return ans.toArray(new int[ans.size()][]);
    }
}
