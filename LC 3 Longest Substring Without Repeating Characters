Brute Force => 

class Solution {
    public int lengthOfLongestSubstring(String str) {
        int maxLen = 0;
        if(str.length() == 0) return 0;
        if(str.length() == 1) return 1;
        for(int i = 0; i < str.length(); i++){
            Set<Character> st = new HashSet<>();
            for(int j = i; j < str.length(); j++){
                if(st.contains(str.charAt(j))){
                    maxLen = Math.max(maxLen, j - i);
                    break;
                } 
                st.add(str.charAt(j));
                maxLen = Math.max(maxLen, j - i + 1);
            }
        } return maxLen;
    }
}

Optimal Approach => 

class Solution {
    public int lengthOfLongestSubstring(String str) {
       HashMap< Character,Integer> mpp = new HashMap<>();
       int left = 0, right = 0;
       int n = str.length();
       int maxLen = 0;
       while(right < n){
        if(mpp.containsKey(str.charAt(right)))left =  Math.max(mpp.get(str.charAt(right)) + 1, left);
        mpp.put(str.charAt(right), right);
        maxLen = Math.max(maxLen, right - left + 1);
        right++;
       } return maxLen;
    }
}
