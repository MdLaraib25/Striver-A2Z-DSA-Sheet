class Solution {
    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        int n = nums.size();

        for (int i = 0; i + 2 * k <= n; i++) {

            int cnt1 = 0;
            for (int j = i + 1; j < i + k; j++) {
                if (nums.get(j - 1) < nums.get(j)) {
                    cnt1++;
                }
            }

            if(cnt1 == k - 1){
            int cnt2 = 0;
            for (int j = i + k + 1; j < i + 2 * k; j++) {
                if (nums.get(j - 1) < nums.get(j)) {
                    cnt2++;
                }
            }
            if (cnt1 == k - 1 && cnt2 == k - 1) {
                return true;
            }
            }
            
        }

        return false;
    }
}



Approach - 02 

class Solution {

    public boolean hasIncreasingSubarrays(List<Integer> nums, int k) {
        int n = nums.size();
        int cnt = 1;
        int precnt = 0;
        int ans = 0;

        for (int i = 1; i < n; ++i) {
            if (nums.get(i) > nums.get(i - 1)) {
                ++cnt;
            } else {
                precnt = cnt;
                cnt = 1;
            }
            ans = Math.max(ans, Math.min(precnt, cnt));
            ans = Math.max(ans, cnt / 2);
        }

        return ans >= k;
    }
}
