// /**
//  * Definition for singly-linked list.
//  * public class ListNode {
//  *     int val;
//  *     ListNode next;
//  *     ListNode() {}
//  *     ListNode(int val) { this.val = val; }
//  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
//  * }
//  */

class Solution {
    public static ListNode reverseLL(ListNode head){
        ListNode temp = head;
        ListNode prev = null;
        while(temp != null){
            ListNode front  = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        } 
        return prev;  
    }
    public static ListNode getKthListNode(ListNode temp , int k){
        while(temp != null && k > 1){ 
            k--;
            temp = temp.next;
        } 
        return temp;
    }

    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prevLast = null;

        while(temp != null){
            ListNode kthNode = getKthListNode(temp , k);
            if(kthNode ==  null){
                if(prevLast != null){
                    prevLast.next = temp; 
                }
                break;
            }

            ListNode nextNode = kthNode.next;
            kthNode.next = null;
            ListNode newHead = reverseLL(temp);

            if (temp == head) {
                head = newHead;
            } else {
                prevLast.next = newHead;
            }
            prevLast = temp;   
            temp = nextNode; 
        }
        return head;
    }
}
